
%include 'in_out.asm'

SECTION .data
    msg db "Результат: ", 0

SECTION .text
global _start
_start:
    pop ecx         ; Извлекаем количество аргументов
    pop edx         ; Извлекаем имя программы
    sub ecx, 1      ; Уменьшаем счетчик аргументов (без имени программы)
    mov esi, 1      ; Инициализируем произведение на 1
next:
    cmp ecx, 0h     ; Проверяем, остались ли аргументы
    jz _end         ; Если аргументов нет, завершить цикл
    pop eax         ; Извлекаем следующий аргумент
    call atoi       ; Преобразуем аргумент в число
    imul esi, eax   ; Умножаем число на произведение
    loop next       ; Переход к следующему аргументу
_end:
    mov eax, msg    ; Вывод сообщения "Результат: "
    call sprint
    mov eax, esi    ; Передача произведения в регистр `eax`
    call iprintLF   ; Печать результата
    call quit       ; Завершение программы

